{"version":3,"sources":["App.js","serviceWorker.js","Baba.js","index.js","logo.svg"],"names":["Component","Boolean","window","location","hostname","match","Baba","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","Date","text","_this2","setInterval","setState","react_default","a","createElement","className","Baba_Welcome","newDate","name","React","Welcome","_this3","console","log","props","toString","ReactDOM","render","src_Baba","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+OAIkBA,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DChBAC,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,KAAM,IAAIC,KACVC,KAAM,OAJAV,mFAaM,IAAAW,EAAAR,KAChBS,YAAY,WACRD,EAAKE,SAAS,CACVL,KAAM,IAAIC,QAEf,sCAGH,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,+DAGIH,EAAAC,EAAAC,cAACE,EAAD,CAASC,QAAShB,KAAKI,MAAMC,KAAMY,KAAMjB,KAAKI,MAAMG,eA1BjDW,IAAM5B,WAgCnB6B,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAtB,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACVC,EAAAtB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,QACKI,MAAQ,GAGbiB,QAAQC,IAAI,uGALFF,oFAQVC,QAAQC,IAAI,mJAIZ,OADAD,QAAQC,IAAI,yCAERX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,oBAAYb,KAAKuB,MAAMN,MACvBN,EAAAC,EAAAC,cAAA,WAFJ,0CAGcb,KAAKuB,MAAMP,QAAQQ,8JAUrC,OAAO,gDAGPH,QAAQC,IAAI,iGAGZD,QAAQC,IAAI,uFAGZD,QAAQC,IAAI,6BApCEJ,IAAM5B,WAwCbM,ICjEf6B,IAASC,OACLf,EAAAC,EAAAC,cAACc,EAAD,MACAC,SAASC,eAAe,SFsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCGnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.0ed3ee0f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nclass Baba extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data: new Date(),\r\n            text: 'FCH'\r\n\r\n        }\r\n    }\r\n    // upDate() {\r\n    //     this.setState({\r\n    //         data: new Date()\r\n    //     })\r\n    // }\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.setState({\r\n                data: new Date()\r\n            })\r\n        }, 1000)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='father'>\r\n                地面调温冷暖舒适系统\r\n                {/* <button onClick={() => { this.upDate() }}>upDate</button> */}\r\n                <Welcome newDate={this.state.data} name={this.state.text} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Welcome extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n\r\n        }\r\n        console.log('我已经在 constructor 里将 props 和 state 初始化好了')\r\n    }\r\n    componentWillMount() {\r\n        console.log('运行到这里的话，说明马上就要运行 render 了')\r\n    }\r\n    render() {\r\n        console.log('嗯，这里是 render')\r\n        return (\r\n            <div className=\"dynamicUpdateTime\">\r\n                <h1>Hello, {this.props.name}</h1>\r\n                <br />\r\n                FCH推广进行时：{this.props.newDate.toString()}\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n\r\n    }\r\n    componentWillReceiveProps() {\r\n    }\r\n    shouldComponentUpdate() {\r\n        return true\r\n    }\r\n    componentWillUpdate() {\r\n        console.log('我要更新组件啦！')\r\n    }\r\n    componentDidUpdate() {\r\n        console.log('更新完毕啦！')\r\n    }\r\n    componentWillUnmount() {\r\n        console.log('要死了')\r\n    }\r\n}\r\n\r\nexport default Baba\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport Baba from './Baba'\n\nReactDOM.render(\n    <Baba />,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}