{"version":3,"sources":["TodoInput.js","TodoItem.js","localStore.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","react_default","a","createElement","type","value","this","props","content","className","onChange","changeTitle","bind","onKeyPress","submit","e","key","onSubmit","Component","TodoItem","checked","todo","status","toggle","title","onClick","delete","onToggle","onDelete","save","window","localStorage","setItem","JSON","stringify","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newTodo","todoList","parse","getItem","_this2","todos","filter","item","deleted","map","index","TodoItem_TodoItem","console","log","TodoInput_TodoInput","addTodo","event","push","id","idMaker","target","setState","localStore","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f631f3d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './TodoInput.css'\r\n\r\nexport default class TodoInput extends Component {\r\n    render() {\r\n        return <input type=\"text\" value={this.props.content}\r\n            className=\"TodoInput\"\r\n            onChange={this.changeTitle.bind(this)}\r\n            onKeyPress={this.submit.bind(this)} />\r\n    }\r\n    submit(e) {\r\n        if (e.key === 'Enter') {\r\n            this.props.onSubmit(e)\r\n        }\r\n    }\r\n    changeTitle(e) {\r\n        this.props.onChange(e)\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport './TodoItem.css'\r\nexport default class TodoItem extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TodoItem\">\r\n                <input type=\"checkbox\" checked={this.props.todo.status === 'completed'}\r\n                    onChange={this.toggle.bind(this)} />\r\n                <span className=\"title\">{this.props.todo.title}</span>\r\n                <button onClick={this.delete.bind(this)}>删除</button>\r\n            </div>\r\n        )\r\n    }\r\n    toggle(e) {\r\n        this.props.onToggle(e, this.props.todo)\r\n    }\r\n    delete(e) {\r\n        this.props.onDelete(e, this.props.todo)\r\n    }\r\n}","export function save(key, value) {\r\n    return window.localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport function load(key) {\r\n    return JSON.parse(window.localStorage.getItem(key))\r\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport TodoInput from './TodoInput'\nimport TodoItem from './TodoItem'\nimport * as localStore from './localStore'\nimport 'normalize.css'\nimport './reset.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newTodo: '',\n      todoList: localStore.load('todoList') || []\n    }\n  }\n  render() {\n    let todos = this.state.todoList\n      .filter((item) => !item.deleted)\n      .map((item, index) => {\n        return (\n          <li key={index}>\n            <TodoItem todo={item} onToggle={this.toggle.bind(this)}\n              onDelete={this.delete.bind(this)} />\n          </li>\n        )\n      })\n    console.log('todos')\n    console.log(todos)\n    return (\n      <div className=\"App\">\n        <h1>我的待办</h1>\n        <div className=\"inputWrapper\">\n          <TodoInput\n            content={this.state.newTodo}\n            onSubmit={this.addTodo.bind(this)}\n            onChange={this.changeTitle.bind(this)} />\n        </div>\n        <ol className=\"todoList\">\n          {todos}\n        </ol>\n      </div>\n    );\n  }\n  addTodo(event) {\n    this.state.todoList.push({\n      id: idMaker(),\n      title: event.target.value,\n      status: null,\n      deleted: false\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n    localStore.save('todoList', this.state.todoList)\n  }\n  toggle(e, todo) {\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state)\n    localStore.save('todoList', this.state.todoList)\n  }\n  changeTitle(event) {\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n    localStore.save('todoList', this.state.todoList)\n  }\n  delete(event, todo) {\n    todo.deleted = true\n    this.setState(this.state)\n    localStore.save('todoList', this.state.todoList)\n  }\n}\n\nexport default App;\n\nlet id = 0;\nfunction idMaker() {\n  id += 1\n  return id\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}